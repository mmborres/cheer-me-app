<!DOCTYPE html>
<html>
<head>
  <script src="face-api.js"></script>
  <script src="js/commons.js"></script>
  <script src="js/faceDetectionControls.js"></script>
  <link rel="stylesheet" href="styles.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.100.2/css/materialize.css">
  <script type="text/javascript" src="https://code.jquery.com/jquery-2.1.1.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.100.2/js/materialize.min.js"></script>
  <title>Cheer-Me-App</title>
</head>
<!--'https://s3.amazonaws.com/static.baggu.com/Wallpaper/FA18/YellowHappy_2560_1440.png'-->
<body>
  <!--
  style="background-image: url('https://wonderfulengineering.com/wp-content/uploads/2014/09/star-wars-wallpaper-31.jpg'); background-color: yellow">
  -->
  <div class="bg-image-p1"></div>
  
  <div class="bg-text">

  <!--div id="navbar"></div-->
  <div class="center-content page-container">
      <h1 id="title-expression" ><b>Cheer-Me-App</b></h1>

    <div class="progress" id="loader">
      <div class="indeterminate"></div>
    </div>

    <div style="position: relative" class="margin">
      <video onloadedmetadata="onPlay(this)" id="inputVideo" autoplay muted style="visibility: visible;"></video>
      <!-- video onloadedmetadata="onPlay(this)" id="inputVideo" autoplay muted></video -->
      <canvas id="overlay" style="visibility: visible;"></canvas>
      <canvas id="snap" style="display: none;"></canvas><br><a id="linktosnap" target="_blank" onclick="showimage(); return true;"></a>
    </div>


    <!-- Hidden canvas element. Used for taking snapshot of video. -->
    <!--h1 id="title-expression" style="visibility: hidden;"></h1 -->
    <!--canvas id="snap" style="visibility: hidden;""></canvas><a id="linktosnap" target="_blank" onclick="showimage(); return true;"></a-->
    <!--a href="/cheerme" style="text-decoration: none" id="cheerme-link"><button id="cheerme" style="visibility: hidden;"></button></a-->
    

    <div class="flex-container controls">
          <button id="take-photo" onclick="takeSnapshot()">Take Snapshot</button>
          <button id="stopcam" onclick="stopcam()">Set Video</button>
          <a href="/cheerme" style="text-decoration: none; color: white;" id="cheerme-link"><button id="cheerme" style="visibility: hidden; display: none;"></button></a>
    </div>

    

    <div class="row side-by-side"></div>

    </div>

    </div>
  </body>

  <script>
//snapshot

var lastResult;
var imagestr;

function stopcam() {
    var video = document.querySelector('#inputVideo');
    var buttonCam = document.querySelector('#stopcam');
    
    if (video.paused) {

      video.style.visibility = "visible";
      video.style.display = "inline";

      var overlaycanvas = document.querySelector('#overlay');
          overlaycanvas.style.visibility = "visible";
          overlaycanvas.style.display = "inline";

          var hidden_canvas = document.querySelector('#snap');
          hidden_canvas.style.visibility = "hidden";
          hidden_canvas.style.display = "none";

          var expTitle = document.querySelector('#title-expression');
          expTitle.innerHTML = "<b>Cheer-Me-App</b>";

          var buttonTakeShot = document.querySelector('#take-photo');
          buttonTakeShot.disabled = false;
          buttonTakeShot.style.visibility = "visible";
          buttonTakeShot.style.display = "inline";

          var cheerMe = document.querySelector('#cheerme');
          cheerMe.style.visibility = "hidden";
          cheerMe.style.display = "none";

          var asnap = document.getElementById("linktosnap");
          asnap.style.visibility = "hidden";

      video.play();
      //buttonCam.innerHTML = "Stop Camera";
    } /*else {
      video.pause();
      //buttonCam.innerHTML = "Restart Camera";
    }*/
  }

function takeSnapshot(){
        let highestexpression = "";
        // Here we're using a trick that involves a hidden canvas element.  
        var video = document.querySelector('#inputVideo');

        if (video) {
          video.pause();
          var buttonTakeShot = document.querySelector('#take-photo');
          buttonTakeShot.disabled = true;
          buttonTakeShot.style.visibility = "hidden";
          
          video.style.visibility = "hidden";
          video.style.display = "none";

          var overlaycanvas = document.querySelector('#overlay');
          
          overlaycanvas.style.visibility = "hidden";
          overlaycanvas.style.display = "none";
        }

        if (lastResult) {

          let highestValue = 0.00;

          Object.keys(lastResult.expressions)
            .forEach(function eachKey(key) { 
              const expressValue = lastResult.expressions[key];

              if ( Number(expressValue) > Number(highestValue) ) {
                highestValue = expressValue;
                highestexpression = key; 
              }
            });

            var cheerMe = document.querySelector('#cheerme');
            cheerMe.innerHTML = "I am feeling " + highestexpression + "... Cheer Me Up!";
            cheerMe.style.visibility = "visible";
            cheerMe.style.display = "inline";

            var expTitle = document.querySelector('#title-expression');
            expTitle.innerHTML = "<b>Cheer-Me-App<br>[" + highestexpression.toUpperCase() + "]</b>";
        }

        var hidden_canvas = document.querySelector('#snap'), //canvas
            context = hidden_canvas.getContext('2d');
        
        hidden_canvas.style.display = "inline";
        hidden_canvas.style.visibility = "visible";

        var width = video.videoWidth,
            height = video.videoHeight;
        
        if (video) {
          var buttonCam = document.querySelector('#stopcam');
          
            /*setTimeout(function(){ 
              if ( buttonCam.innerHTML === "Stop Camera") {
                video.play(); 
              }
              buttonTakeShot.disabled = false; 
            }, 3000);*/
          
        }

        if (width && height) {

            // Setup a canvas with the same dimensions as the video.
            hidden_canvas.width = width;
            hidden_canvas.height = height;

            // Make a copy of the current frame in the video on the canvas.
            context.drawImage(video, 0, 0, width, height);

            // Turn the canvas image into a dataURL that can be used as a src for our photo.
            imagestr = hidden_canvas.toDataURL('image/png');
            console.log(imagestr);
            const acheer = document.getElementById("cheerme-link");
            acheer.href = `/cheerme/${highestexpression}`; ///${imagestr}`;

            const asnap = document.getElementById("linktosnap");
            asnap.href = imagestr;
            asnap.target = "_blank";
            asnap.innerHTML = "Image Link";
            
            return imagestr;
        }
    }

    function showimage() {
      console.log("imagestr", imagestr);
      var win = window.open();
      //window.open(imagestr, "Window Title", "width=500, height=450");

      win.document.write('<iframe src="' + imagestr  + '" frameborder="0" style="border:0; top:0px; left:0px; bottom:0px; right:0px; width:100%; height:100%;" allowfullscreen></iframe>');
    }

//snapshot

    let forwardTimes = [];
    let withBoxes = true;

    function onChangeHideBoundingBoxes(e) {
      withBoxes = !$(e.target).prop('checked');
    }

    function updateTimeStats(timeInMs) {
      forwardTimes = [timeInMs].concat(forwardTimes).slice(0, 30);
      const avgTimeInMs = forwardTimes.reduce((total, t) => total + t) / forwardTimes.length;
      $('#time').val(`${Math.round(avgTimeInMs)} ms`);
      $('#fps').val(`${faceapi.round(1000 / avgTimeInMs)}`);
    }

    async function onPlay() {
      const videoEl = $('#inputVideo').get(0);

      if(videoEl.paused || videoEl.ended || !isFaceDetectionModelLoaded())
        return setTimeout(() => onPlay());


      const options = getFaceDetectorOptions();

      const ts = Date.now();

      const result = await faceapi.detectSingleFace(videoEl, options).withFaceExpressions();

      updateTimeStats(Date.now() - ts);

      if (result) {

        lastResult = result;
        const canvas = $('#overlay').get(0);
        const dims = faceapi.matchDimensions(canvas, videoEl, true);

        const resizedResult = faceapi.resizeResults(result, dims);

        const minConfidence = 0.05;
        if (withBoxes) {
          faceapi.draw.drawDetections(canvas, resizedResult);
        }
        faceapi.draw.drawFaceExpressions(canvas, resizedResult, minConfidence);
      }

      setTimeout(() => onPlay());
    }

    async function run() {
      // load face detection and face expression recognition models
      await changeFaceDetector(TINY_FACE_DETECTOR);
      await faceapi.loadFaceExpressionModel('/');
      changeInputSize(224);

      // try to access users webcam and stream the images
      // to the video element
      
      /// VIDEO
      let videoEl = $('#inputVideo').get(0);

      ////video
      // Request the camera.
      navigator.getUserMedia(
            {
              video: true
            },

            // Success Callback
            function(stream){

                // Create an object URL for the video stream and
                // set it as src of our HTML video element.

                try {
                    videoEl.srcObject = stream;
                  } catch (error) {
                    videoEl.src = window.URL.createObjectURL(stream);
                  }

                // Play the video element to start the stream.
                videoEl.play();
         
            },
            // Error Callback
            function(err){
                displayErrorMessage("There was an error with accessing the camera stream: " + err.name, err);
            }
        );

      ////video
      
    }

    function updateResults() {}

    $(document).ready(function() {
      renderNavBar('#navbar', 'webcam_face_expression_recognition');
      initFaceDetectionControls();
      run();
    })


    
  </script>
</body>
</html>