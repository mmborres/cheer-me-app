<!DOCTYPE html>
<html>
<head>
  <script src="face-api.js"></script>
  <script src="js/commons.js"></script>
  <script src="js/faceDetectionControls.js"></script>
  <link rel="stylesheet" href="styles.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.100.2/css/materialize.css">
  <script type="text/javascript" src="https://code.jquery.com/jquery-2.1.1.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.100.2/js/materialize.min.js"></script>
  <title>Cheer-Me-App</title>
</head>
<body style="background-image: url('https://s3.amazonaws.com/static.baggu.com/Wallpaper/FA18/YellowHappy_2560_1440.png'); background-color: yellow">
  
  <div id="navbar"></div>
  <div class="center-content page-container">
      <h1 style="background-color: wheat">Cheer-Me-App</h1>

    <div class="progress" id="loader">
      <div class="indeterminate"></div>
    </div>

    <div style="position: relative" class="margin">
      <video onloadedmetadata="onPlay(this)" id="inputVideo" autoplay muted></video>
      <!-- video onloadedmetadata="onPlay(this)" id="inputVideo" autoplay muted></video -->
      <canvas id="overlay" />
    </div>

    <div class="controls">
        <!--a href="#" id="take-photo" title="Take Photo" -->
          <button id="take-photo" onclick="takeSnapshot()">Take Snapshot</button>
          <button id="stopcam" onclick="stopcam()">Stop Camera</button><br>
        <!--/a -->
    </div>

    <!-- Hidden canvas element. Used for taking snapshot of video. -->
    <h3 id="title-expression" style="background-color: wheat"></h3>
    <canvas id="snap"></canvas><br>
    <a href="/cheerme" style="text-decoration: none"><button id="cheerme" style="color: black"></button></a>

    <div class="row side-by-side">

      <!--face_detector_selection_control
      <div id="face_detector_selection_control" class="row input-field" style="margin-right: 20px;">
        <select id="selectFaceDetector">
          <option value="ssd_mobilenetv1">SSD Mobilenet V1</option>
          <option value="tiny_face_detector">Tiny Face Detector</option>
          <option value="mtcnn">MTCNN</option>
        </select>
        <label>Select Face Detector</label>
      </div>
      face_detector_selection_control -->

      <!-- check boxes
      <div class="row" style="width: 220px;">
        <input type="checkbox" id="hideBoundingBoxesCheckbox" onchange="onChangeHideBoundingBoxes(event)" />
        <label for="hideBoundingBoxesCheckbox">Hide Bounding Boxes</label>
      </div>
      check boxes -->

      <!-- fps_meter
      <div id="fps_meter" class="row side-by-side">
        <div>
          <label for="time">Time:</label>
          <input disabled value="-" id="time" type="text" class="bold">
          <label for="fps">Estimated Fps:</label>
          <input disabled value="-" id="fps" type="text" class="bold">
        </div>
      </div>
      fps_meter -->

    </div>


    <!-- ssd_mobilenetv1_controls
    <span id="ssd_mobilenetv1_controls">
      <div class="row side-by-side">
        <div class="row">
          <label for="minConfidence">Min Confidence:</label>
          <input disabled value="0.5" id="minConfidence" type="text" class="bold">
        </div>
        <button
          class="waves-effect waves-light btn"
          onclick="onDecreaseMinConfidence()"
        >
          <i class="material-icons left">-</i>
        </button>
        <button
          class="waves-effect waves-light btn"
          onclick="onIncreaseMinConfidence()"
        >
          <i class="material-icons left">+</i>
        </button>
      </div>
    </span>
    ssd_mobilenetv1_controls -->

    <!-- tiny_face_detector_controls
    <span id="tiny_face_detector_controls">
      <div class="row side-by-side">
        <div class="row input-field" style="margin-right: 20px;">
          <select id="inputSize">
            <option value="" disabled selected>Input Size:</option>
            <option value="128">128 x 128</option>
            <option value="160">160 x 160</option>
            <option value="224">224 x 224</option>
            <option value="320">320 x 320</option>
            <option value="416">416 x 416</option>
            <option value="512">512 x 512</option>
            <option value="608">608 x 608</option>
          </select>
          <label>Input Size</label>
        </div>
        <div class="row">
          <label for="scoreThreshold">Score Threshold:</label>
          <input disabled value="0.5" id="scoreThreshold" type="text" class="bold">
        </div>
        <button
          class="waves-effect waves-light btn"
          onclick="onDecreaseScoreThreshold()"
        >
          <i class="material-icons left">-</i>
        </button>
        <button
          class="waves-effect waves-light btn"
          onclick="onIncreaseScoreThreshold()"
        >
          <i class="material-icons left">+</i>
        </button>
      </div>
    </span>
    tiny_face_detector_controls -->

    <!-- mtcnn_controls
    <span id="mtcnn_controls">
      <div class="row side-by-side">
        <div class="row">
          <label for="minFaceSize">Minimum Face Size:</label>
          <input disabled value="20" id="minFaceSize" type="text" class="bold">
        </div>
        <button
          class="waves-effect waves-light btn"
          onclick="onDecreaseMinFaceSize()"
        >
          <i class="material-icons left">-</i>
        </button>
        <button
          class="waves-effect waves-light btn"
          onclick="onIncreaseMinFaceSize()"
        >
          <i class="material-icons left">+</i>
        </button>
      </div>
    </span>
    mtcnn_controls -->

  </body>

  <script>
//snapshot

var lastResult;

function stopcam() {
    var video = document.querySelector('#inputVideo');
    var buttonCam = document.querySelector('#stopcam');
    
    if (video.paused) {
      video.play();
      buttonCam.innerHTML = "Stop Camera";
    } else {
      video.pause();
      buttonCam.innerHTML = "Restart Camera";
    }
  }

function takeSnapshot(){
        // Here we're using a trick that involves a hidden canvas element.  
        var video = document.querySelector('#inputVideo');

        if (video) {
          video.pause();
          var buttonTakeShot = document.querySelector('#take-photo');
          buttonTakeShot.innerHTML = "Retake Snapshot";
          buttonTakeShot.disabled = true;
        }

        if (lastResult) {
          //console.log(lastResult);
          //console.log(lastResult.expressions);

          let highestexpression = "";

          let highestValue = 0.00;

          Object.keys(lastResult.expressions)
            .forEach(function eachKey(key) { 
              //console.log(key); // alerts key 
              const expressValue = lastResult.expressions[key];
              //console.log(expressValue); // alerts value

              if ( Number(expressValue) > Number(highestValue) ) {
                highestValue = expressValue;
                highestexpression = key; 
              }
            });

            var cheerMe = document.querySelector('#cheerme');
            cheerMe.innerHTML = "I am feeling " + highestexpression + "... Cheer Me Up!";

            var expTitle = document.querySelector('#title-expression');
            expTitle.innerHTML = "Gotcha! [" + highestexpression.toUpperCase() + "]";
        }

        var hidden_canvas = document.querySelector('#snap'), //canvas
            context = hidden_canvas.getContext('2d');

        var width = video.videoWidth,
            height = video.videoHeight;
        
        if (video) {
          var buttonCam = document.querySelector('#stopcam');
          
            setTimeout(function(){ 
              if ( buttonCam.innerHTML === "Stop Camera") {
                video.play(); 
              }
              buttonTakeShot.disabled = false; 
            }, 5000);
          
        }

        if (width && height) {

            // Setup a canvas with the same dimensions as the video.
            hidden_canvas.width = width;
            hidden_canvas.height = height;

            // Make a copy of the current frame in the video on the canvas.
            context.drawImage(video, 0, 0, width, height);

            // Turn the canvas image into a dataURL that can be used as a src for our photo.
            return hidden_canvas.toDataURL('image/png');
        }
    }

//snapshot

    let forwardTimes = [];
    let withBoxes = true;

    function onChangeHideBoundingBoxes(e) {
      withBoxes = !$(e.target).prop('checked');
    }

    function updateTimeStats(timeInMs) {
      forwardTimes = [timeInMs].concat(forwardTimes).slice(0, 30);
      const avgTimeInMs = forwardTimes.reduce((total, t) => total + t) / forwardTimes.length;
      $('#time').val(`${Math.round(avgTimeInMs)} ms`);
      $('#fps').val(`${faceapi.round(1000 / avgTimeInMs)}`);
    }

    async function onPlay() {
      const videoEl = $('#inputVideo').get(0);

      if(videoEl.paused || videoEl.ended || !isFaceDetectionModelLoaded())
        return setTimeout(() => onPlay());


      const options = getFaceDetectorOptions();
      //console.log(options);

      const ts = Date.now();

      const result = await faceapi.detectSingleFace(videoEl, options).withFaceExpressions();

      updateTimeStats(Date.now() - ts);

      if (result) {
        //console.log(result);
        lastResult = result;
        const canvas = $('#overlay').get(0);
        const dims = faceapi.matchDimensions(canvas, videoEl, true);

        const resizedResult = faceapi.resizeResults(result, dims);
        //conole.log(resizedResult);
        const minConfidence = 0.05;
        if (withBoxes) {
          faceapi.draw.drawDetections(canvas, resizedResult);
        }
        faceapi.draw.drawFaceExpressions(canvas, resizedResult, minConfidence);
      }

      setTimeout(() => onPlay());
    }

    async function run() {
      // load face detection and face expression recognition models
      await changeFaceDetector(TINY_FACE_DETECTOR);
      await faceapi.loadFaceExpressionModel('/');
      changeInputSize(224);

      // try to access users webcam and stream the images
      // to the video element
      
      /// VIDEO
      //const stream = await navigator.mediaDevices.getUserMedia({ video: {} });
      let videoEl = $('#inputVideo').get(0);
      //videoEl.srcObject = stream;

      ////video
      // Request the camera.
      navigator.getUserMedia(
            {
              video: true
            },

            // Success Callback
            function(stream){

                // Create an object URL for the video stream and
                // set it as src of our HTLM video element.
                //video.src = window.URL.createObjectURL(stream);

                try {
                    videoEl.srcObject = stream;
                  } catch (error) {
                    videoEl.src = window.URL.createObjectURL(stream);
                  }

                // Play the video element to start the stream.
                videoEl.play();
                videoEl.onplay = function() {
                    //showVideo();
                    //var buttonTakeShot = document.querySelector('#take-photo');
                    //buttonTakeShot.innerHTML = "Take Snapshot";
                };
         
            },
            // Error Callback
            function(err){
                displayErrorMessage("There was an error with accessing the camera stream: " + err.name, err);
            }
        );

      ////video
      
    }

    function updateResults() {}

    $(document).ready(function() {
      renderNavBar('#navbar', 'webcam_face_expression_recognition');
      initFaceDetectionControls();
      run();
    })


    
  </script>
</body>
</html>